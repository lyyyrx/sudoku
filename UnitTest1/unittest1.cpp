#include "stdafx.h"
#include "CppUnitTest.h"
#include "..\sudoku\sudoku.cpp"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace UnitTest1
{
	TEST_CLASS(UnitTest1)
	{
	public:

		TEST_METHOD(TestMethod1)
		{
			// TODO: 在此输入测试代码
			char test[9][9] = {
				{'1','3','5','0','7','4','0','0','0'},
				{'0','0','6','0','0','2','0','0','7'},
				{'7','0','0','1','0','5','0','8','0'},
				{'0','2','0','0','0','0','0','0','6'},
				{'6','0','9','0','3','8','1','2','5'},
				{'0','0','8','0','1','0','4','3','9'},
				{'8','0','7','0','0','0','9','4','0'},
				{'9','1','4','5','0','0','2','6','3'},
				{'2','6','3','9','0','0','7','5','8'}
			};
			for (int i = 0;i < 9;i++) {
				for (int j = 0;j < 9;j++) {
					flagma[i][j] = test[i][j];
				}
			}
			Assert::IsTrue(sudokusolver(0, 0) == 1);
		};

		TEST_METHOD(TestMethod2)
		{
			// TODO: 在此输入测试代码
			char test[9][9] = {
			{ '0','2','1','4','9','0','8','7','0' },
			{ '3','0','4','7','1','8','5','6','2' },
			{ '6','8','7','0','3','0','1','4','9' },
			{ '1','4','0','9','5','7','6','2','0' },
			{ '0','7','8','0','4','3','0','1','5' },
			{ '9','6','0','8','2','0','4','3','7' },
			{ '7','5','6','2','8','4','3','0','1' },
			{ '4','1','9','0','7','0','2','8','6' },
			{ '0','0','2','1','6','9','7','0','4' }
			};
			for (int i = 0;i < 9;i++) {
				for (int j = 0;j < 9;j++) {
					flagma[i][j] = test[i][j];
				}
			}
			Assert::IsTrue(sudokusolver(0, 0) == 1);
		};

		TEST_METHOD(TestMethod3)
		{
			// TODO: 在此输入测试代码
			char test[9][9] = {
			{ '0','2','9','0','6','3','1','0','0' },
			{ '8','0','0','0','1','0','3','0','4' },
			{ '0','0','0','0','0','0','0','0','0' },
			{ '0','3','0','0','8','4','9','0','0' },
			{ '5','9','2','0','0','1','0','0','7' },
			{ '0','0','0','0','0','0','0','0','0' },
			{ '3','0','0','0','2','0','0','7','8' },
			{ '0','0','0','0','0','0','0','0','0' },
			{ '0','6','7','0','0','0','5','1','0' }
			};
			for (int i = 0;i < 9;i++) {
				for (int j = 0;j < 9;j++) {
					flagma[i][j] = test[i][j];
				}
			}
			Assert::IsTrue(sudokusolver(0, 0) == 1);
		};

		TEST_METHOD(TestMethod4)
		{
			// TODO: 在此输入测试代码
			char test[9][9] = {
			{ '0','9','0','0','3','0','0','0','0' },
			{ '0','0','0','7','0','9','5','0','3' },
			{ '3','0','0','0','5','8','1','2','0' },
			{ '0','0','0','1','9','0','0','0','0' },
			{ '7','5','0','0','0','6','0','0','0' },
			{ '0','0','0','0','0','7','2','6','0' },
			{ '8','4','0','9','0','2','7','0','0' },
			{ '6','0','1','0','7','5','0','0','0' },
			{ '0','0','0','6','0','0','0','0','0' }
			};
			for (int i = 0;i < 9;i++) {
				for (int j = 0;j < 9;j++) {
					flagma[i][j] = test[i][j];
				}
			}
			Assert::IsTrue(sudokusolver(0, 0) == 0);
		};

		TEST_METHOD(TestMethod5)
		{
			// TODO: 在此输入测试代码
			char test[9][9] = {
			{ '2','0','0','0','0','0','3','0','1' },
			{ '9','0','0','0','0','0','0','0','2' },
			{ '0','0','5','8','0','0','0','4','0' },
			{ '1','6','0','0','3','0','0','0','0' },
			{ '0','4','0','0','0','6','0','0','0' },
			{ '0','0','7','0','0','0','0','9','0' },
			{ '5','0','0','1','0','0','0','2','0' },
			{ '0','0','8','0','0','9','5','0','4' },
			{ '0','0','0','0','6','5','0','0','0' }
			};
			for (int i = 0;i < 9;i++) {
				for (int j = 0;j < 9;j++) {
					flagma[i][j] = test[i][j];
				}
			}
			Assert::IsTrue(sudokusolver(0, 0) == 0);
		};

		TEST_METHOD(TestMethod6)
		{
			// TODO: 在此输入测试代码
			char test[9][9] = {
			{ '0','0','0','0','0','0','0','0','0' },
			{ '0','0','0','0','0','0','0','0','0' },
			{ '0','0','0','0','0','0','0','0','0' },
			{ '0','0','0','0','0','0','0','0','0' },
			{ '0','0','0','0','0','0','0','0','0' },
			{ '0','0','0','0','0','0','0','0','0' },
			{ '0','0','0','0','0','0','0','0','0' },
			{ '0','0','0','0','0','0','0','0','0' },
			{ '0','0','0','0','0','0','0','0','0' },
			};
			for (int i = 0;i < 9;i++) {
				for (int j = 0;j < 9;j++) {
					flagma[i][j] = test[i][j];
				}
			}

			outputsudoku();
			Assert::IsTrue(chout[10] == '0');
		};

		TEST_METHOD(TestMethod7)
		{
			// TODO: 在此输入测试代码
			char test[9][9] = {
			{ '6','8','9','7','5','4','3','2','1' },
			{ '3','2','1','6','8','9','7','5','4' },
			{ '7','5','4','3','2','1','6','8','9' },
			{ '2','1','6','8','9','7','5','4','3' },
			{ '5','4','3','2','1','6','8','9','7' },
			{ '8','9','7','5','4','3','2','1','6' },
			{ '9','7','5','4','3','2','1','6','8' },
			{ '4','3','2','1','6','8','9','7','5' },
			{ '1','6','8','9','7','5','4','3','2' }
			};
			for (int i = 0;i < 9;i++) {
				for (int j = 0;j < 9;j++) {
					flagma[i][j] = test[i][j];
				}
			}

			outputsudoku();
			Assert::IsTrue(chout[2] == '8');
			Assert::IsTrue(chout[1] == ' ');
			Assert::IsTrue(chout[17] == '\n');
		};

		TEST_METHOD(TestMethod8)
		{
			// TODO: 在此输入测试代码
			char test[9][9] = {
			{ '6','8','9','7','5','4','3','2','1' },
			{ '3','2','1','6','8','9','7','5','4' },
			{ '7','5','4','3','2','1','6','8','9' },
			{ '2','1','6','8','9','7','5','4','3' },
			{ '5','4','3','2','1','6','8','9','7' },
			{ '8','9','7','5','4','3','2','1','6' },
			{ '1','6','8','9','7','5','4','3','2' },
			{ '4','3','2','1','6','8','9','7','5' },
			{ '9','7','5','4','3','2','1','6','8' }
			};
			for (int i = 0;i < 9;i++) {
				for (int j = 0;j < 9;j++) {
					flagma[i][j] = test[i][j];
				}
			}

			outputsudoku();
			Assert::IsTrue(chout[0] == '6');
			Assert::IsTrue(chout[1] == ' ');
			Assert::IsTrue(chout[17] == '\n');
		};

		TEST_METHOD(TestMethod9)
		{
			// TODO: 在此输入测试代码
			int p = 1;
			sudokuproducer(p);
			Assert::IsTrue(store[0] == '6');
			Assert::IsTrue(store[1] == ' ');
			Assert::IsTrue(store[17] == '\n');
			Assert::IsTrue(store[162] == '\n');
		};

		TEST_METHOD(TestMethod10)
		{
			// TODO: 在此输入测试代码
			int p = 1000000;
			Assert::AreEqual(sudokuproducer(p), 1);
		};


	};
}